basedir <- 'OneDrive - Johns Hopkins/Project-MidLevelFeatures/Experiments-Prolific/01-Analysis-Polific/'
datadir <- file.path(basedir, '01-preprocess-02')
filename <- list.files(file.path(getwd(), datadir)) #get list of all files
k = grep('_meta',filename,invert=T) #just select files that don't end with _meta
ind <- 1
data.raw <- read.table(file.path(getwd(), datadir,filename[k[ind]]), header=T, sep = ',')
data.raw$dimension <- rep( substr(filename[k[ind]],1, nchar(filename[k[ind]])-4 ),nrow(data.raw))
# make some variables into factors
data.raw$category <- factor(data.raw$category)
data.raw$item <- factor(data.raw$item)
data.raw$dimension <- factor(data.raw$dimension)
summary(data.raw$answer)
histogram(data.raw$answer)
# by subjects
tmp <- ddply(data.raw, .(subject), summarise,
medianRT = median(answer))
install.packages("ggplot2")
tmp <- ddply(data.raw, .(subject), summarise,
medianRT = median(answer))
require(plyr)
library("plyr")
install.packages("plyr")
library("plyr")
options("repos")[[1]][1]
options(repos="http://streaming.stat.iastate.edu/CRAN")
install.packages("plyr")
library("plyr")
install.packages(pkgs="plyr")
if (!require(dplyr)) {install.packages("dplyr"); require(dplyr)}
group_by(data.raw, subject)
tmp <- ddply(data.raw, .(subject), summarise,
medianRT = median(answer))
data.raw %>% select(subject)  %>% group_by(subject) %>%  summarise(median(answer))
data.raw %>% select(subject)  %>% group_by(subject) %>%  summarise(nrow=n())
head(data.row)
header(data.row)
header(data.raw)
data.raw
data.raw %>% select(category)  %>% group_by(category) %>%  summarise(nrow=n())
data.raw %>% select(answer)  %>% group_by(category) %>%  summarise(nrow=n())
data.raw %>% select(answer)
data.raw %>% select(subject)  %>% group_by(subject) %>%  summarise
data.raw %>% select(subject)  %>% group_by(subject) %>%  summarise  %>% median(answer)
answer
data.raw %>% select(subject)  %>% group_by(subject) %>%  summarise  %>% answer
data.raw %>% select(category)  %>% group_by(category) %>%  summarise  %>% answer
data.raw %>% select(category)  %>% group_by(category)
data.raw %>% select(category)  %>% group_by(category) %>%  summarise
data.raw %>% group_by(category) %>%  summarise(medianRT = median(answer))
data.raw %>% group_by(category) %>%  summarise(meananswer = mean(answer))
data.raw %>% group_by(category) %>%  summarise(STDanswer = std(answer))
data.raw %>% group_by(category) %>%  summarise(STDanswer = sd(answer))
tmp <- data.raw %>% group_by(category) %>%  summarise(meananswer = mean(answer))
tmp1<- data.raw %>% group_by(category) %>%  summarise(STDanswer = sd(answer))
tmp <- data.raw %>% group_by(category) %>%  summarise(meananswer = mean(answer),STDanswer = sd(answer))
tmp
boxplot(tmp$meananswer)
tmp$meananswer
(tmp$meananswer)
hist(tmp$meananswer)
par(mar=c(1,1,1,1))
hist(tmp$meananswer)
ggplot(tmp, aes(x=answer)) + geom_histogram()
require(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2", dependencies = TRUE)
if (!require(tidyverse)) {install.packages("tidyverse"); require(tidyverse)}
install.packages("tidyverse")
install.packages("tidyverse")
devtools::install_github("tidyverse/tidyverse")
install.packages("devtools")
if (!require(tidyverse)) {install.packages("tidyverse"); require(tidyverse)}
require(tidyverse)
install.packages("tidyverse")
if (!require(tidyverse)) {install.packages("tidyverse"); require(tidyverse)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
install.packages('tidyverse', repos = 'https://mirror.las.iastate.edu/CRAN/')
install.packages("tidyverse", type = "binary")
install.packages('tidyverse', repos = 'https://mirror.las.iastate.edu/CRAN/')
if (!require(tidyverse)) {install.packages("tidyverse"); require(tidyverse)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(dplyr)) {install.packages("dplyr"); require(dplyr)}
if (!require(tidyverse)) {install.packages("tidyverse"); require(tidyverse)}
basedir <- 'OneDrive - Johns Hopkins/Project-MidLevelFeatures/Experiments-Prolific/01-Analysis-Polific/'
datadir <- file.path(basedir, '01-preprocess-02')
filename <- list.files(file.path(getwd(), datadir)) #get list of all files
k = grep('_meta',filename,invert=T) #just select files that don't end with _meta
ind <- 1
data.raw <- read.table(file.path(getwd(), datadir,filename[k[ind]]), header=T, sep = ',')
data.raw$dimension <- rep( substr(filename[k[ind]],1, nchar(filename[k[ind]])-4 ),nrow(data.raw))
data.raw$category <- factor(data.raw$category)
data.raw$item <- factor(data.raw$item)
data.raw$dimension <- factor(data.raw$dimension)
summary(data.raw$answer)
histogram(data.raw$answer)
tmp <- data.raw %>% group_by(category) %>%  summarise(meananswer = mean(answer),STDanswer = sd(answer))
par(mar=c(1,1,1,1))
ggplot(tmp, aes(x=answer)) + geom_histogram()
ggplot(data.raw, aes(x=answer)) + geom_histogram()
tmp
ggplot(tmp, aes(x=meananswer)) + geom_histogram()
data.raw$subject
unique(data.raw$subject)
levels(data.raw$subject)
data.raw$subject <- factor(data.raw$subject)
levels(data.raw$subject)
length(levels(data.raw$subject))
# by category
tmp <- data.raw %>% group_by(category) %>%  summarise(meananswer = mean(answer),SEanswer = var(answer)/sqrt(length(levels(data.raw$subject))))
tmp
par(mar=c(1,1,1,1))
# Basic histogram
ggplot(tmp, aes(x=meananswer)) + geom_histogram()
par(mar=c(1,1,1,1))
# Basic histogram
ggplot(tmp, aes(x=meananswer)) + geom_histogram()
# Change the width of bins
ggplot(df, aes(x=weight)) +
geom_histogram(binwidth=1)
# Change colors
p<-ggplot(df, aes(x=weight)) +
geom_histogram(color="black", fill="white")
p
p<-ggplot(tmp, aes(x=meananswer)) +
geom_histogram(color="black", fill="white")
p
ggplot(df, aes(x=weight)) +
geom_histogram(binwidth=1)
ggplot(tmp, aes(x=tmp)) +
geom_histogram(binwidth=1)
p<-ggplot(tmp, aes(x=meananswer)) +
geom_histogram(color="black", fill="white")
p
p<-ggplot(tmp, aes(x=meananswer)) +
geom_histogram(binwidth=10, color="black", fill="white")
p
p<-ggplot(tmp, aes(x=meananswer)) +
geom_histogram(binwidth=.10, color="black", fill="white")
p
p<-ggplot(tmp, aes(x=meananswer)) +
geom_histogram(binwidth=.05, color="black", fill="white")
p
p<-ggplot(tmp, aes(x=meananswer)) +
geom_histogram(binwidth=1, color="black", fill="white")
p
p<-ggplot(tmp, aes(x=meananswer)) +
geom_histogram(binwidth=.01, color="black", fill="white")
p
p<-ggplot(tmp, aes(x=meananswer)) +
geom_histogram(binwidth=.10, color="black", fill="white")
p
p<-ggplot(tmp, aes(x=meananswer)) +
geom_histogram(binwidth=.05, color="black", fill="white")
p
p<-ggplot(tmp, aes(x=meananswer)) +
geom_histogram(binwidth=.05, color="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
p
tmp <- data.raw %>% group_by(category) %>%  summarise(meananswer = mean(answer),SEanswer = var(answer)/sqrt(length(levels(data.raw$subject))))
par(mar=c(1,1,1,1))
#histogram of frequencies of asnwers
p<-ggplot(tmp, aes(x=meananswer)) +
geom_histogram(binwidth=.05, color="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666") +
ggtitle(nchar(filename[k[ind]])-4) # for the main title+
xlab('average rating') # for the x axis label+
ylab('frequency') # for the y axis label
p
tmp <- data.raw %>% group_by(category) %>%  summarise(meananswer = mean(answer),SEanswer = var(answer)/sqrt(length(levels(data.raw$subject))))
par(mar=c(1,1,1,1))
#histogram of frequencies of asnwers
p<-ggplot(tmp, aes(x=meananswer)) +
geom_histogram(binwidth=.05, color="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666") +
ggtitle(nchar(filename[k[ind]])-4) + # for the main title+
xlab('average rating') + # for the x axis label+
ylab('frequency') # for the y axis label
p
nchar(filename[k[ind]])-4
tmp <- data.raw %>% group_by(category) %>%  summarise(meananswer = mean(answer),SEanswer = var(answer)/sqrt(length(levels(data.raw$subject))))
par(mar=c(1,1,1,1))
#histogram of frequencies of asnwers
p<-ggplot(tmp, aes(x=meananswer)) +
geom_histogram(binwidth=.05, color="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666") +
ggtitle(filename[k[ind]]) + # for the main title+
xlab('average rating') + # for the x axis label+
ylab('frequency') # for the y axis label
p
filename[k[ind]][1]
filename[k[ind]][1,1]
filename[k[ind]]{1}
filename[k[ind]](1)
catname <- substr(filename[k[ind]],1, nchar(filename[k[ind]])-4
catname
catname <- substr(filename[k[ind]],1, nchar(filename[k[ind]])-4 )
data.raw$dimension <- rep( catname,nrow(data.raw))
p<-ggplot(tmp, aes(x=meananswer)) +
geom_histogram(binwidth=.05, color="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666") +
ggtitle(catname) + # for the main title+
xlab('average rating') + # for the x axis label+
ylab('frequency') # for the y axis label
p
data.raw
data.raw
data.raw$subject
tmp2 <- data.raw %>% group_by(subject) %>%  summarise(CoorBySub = corr(answer))
tmp2 <- data.raw %>% group_by(subject)
tmp2
if (!require(GGally)) {install.packages("GGally"); require(GGally)}
ggcorr(data.raw)
statsBy(data.raw, subject)
if (!require(psych)) {install.packages("psych"); require(psych)}
statsBy(data.raw, subject)
statsBy(data.raw, data.raw$subject)
statsBy(data.raw$answer, data.raw$subject)
data.raw$answer
data.raw$subject
statsBy(data.raw$answer, data.raw$subject)
data.frame(var1=data.raw$answer, var2=data.raw$answer, categories=data.raw$subject) %>%
group_by(categories) %>%
summarize(cor= cor(var1, var2))
data.frame(var1=data.raw$answer, var2=data.raw$answer, categories=data.raw$subject) %>%
group_by(categories)
c <- list()
for(q in unique(data.raw$subject)) {
for(t in unique(data.raw$subject)) {
c[q,t] <- cor(data.raw[data.raw$subject == q]$answer,data.raw[data.raw$subject == t]$answer)
}
}
data.raw[data.raw$subject == q]$answer
data.raw[data.raw$subject == q]$answer
data.raw[data.raw$subject == 1]$answer
data.raw$subject
levels(data.raw$subject)
levels(data.raw$subject) == 1
nchar(levels(data.raw$subject)) == 1
nchar(levels(data.raw$subject))
levels(data.raw$subject)
'sub_' + 1
['sub_' + 1]
['sub_'  1]
as.integer(levels((data.raw$subject)))
which(data.raw$subject)
asinteger(data.raw$subject)
as.integer(data.raw$subject)
unique(as.integer(data.raw$subject))
cat("hi",x)
cat("hi",1)
cat("hi",1,setp ='')
paste("hi",1)
str_c("hi",1)
c <- list()
for(q in unique(data.raw$subject)) {
for(t in unique(data.raw$subject)) {
c[q,t] <- cor(data.raw[data.raw$subject == str_c("sub_",q)]$answer,data.raw[data.raw$subject == str_c("sub_",t)]$answer)
}
}
str_c("sub_",q)
unique(data.raw$subject)
data.raw$subject == q
data.raw$subject == q
data.raw[data.raw$subject == q,]$answer
c <- list()
for(q in unique(data.raw$subject)) {
for(t in unique(data.raw$subject)) {
c[q,t] <- cor(data.raw[data.raw$subject == q,]$answer,data.raw[data.raw$subject == t,]$answer)
}
}
c <- matrix(, nrow = 30, ncol = 30)
for(q in unique(data.raw$subject)) {
for(t in unique(data.raw$subject)) {
c[q,t] <- cor(data.raw[data.raw$subject == q,]$answer,data.raw[data.raw$subject == t,]$answer)
}
}
c <- matrix(, nrow = 30, ncol = 30)
c
for(q in unique(data.raw$subject)) {
for(t in unique(data.raw$subject)) {
c[q,t] <- cor(data.raw[data.raw$subject == q,]$answer,data.raw[data.raw$subject == t,]$answer)
}
}
cor(data.raw[data.raw$subject == q,]$answer,data.raw[data.raw$subject == t,]$answer)
c
c <- matrix(, nrow = 30, ncol = 30)
count1 <- 0
count2 <- 0
for(q in unique(data.raw$subject)) {
count1 <- count1 + 1
for(t in unique(data.raw$subject)) {
count2 <- count2 + 1
c[q,t] <- cor(data.raw[data.raw$subject == q,]$answer,data.raw[data.raw$subject == t,]$answer)
}
}
c
count1
count1 <- count1 + 1
count2 <- count2 + 1
t
count1 <- 0
count2 <- 0
count1 <- count1 + 1
count2 <- count2 + 1
c[q,t] <- cor(data.raw[data.raw$subject == q,]$answer,data.raw[data.raw$subject == t,]$answer)
cor(data.raw[data.raw$subject == q,]$answer,data.raw[data.raw$subject == t,]$answer)
for(q in unique(data.raw$subject)) {
count1 <- count1 + 1
for(t in unique(data.raw$subject)) {
count2 <- count2 + 1
c[count1,count2] <- cor(data.raw[data.raw$subject == q,]$answer,data.raw[data.raw$subject == t,]$answer)
}
}
count1
count2
[count1,count2]
c
c <- matrix(, nrow = 30, ncol = 30)
count1 <- 0
count2 <- 0
for(q in unique(data.raw$subject)) {
count1 <- count1 + 1
for(t in unique(data.raw$subject)) {
count2 <- count2 + 1
c[count1,count2] <- cor(data.raw[data.raw$subject == q,]$answer,data.raw[data.raw$subject == t,]$answer)
}
}
count1
count2
c <- matrix(, nrow = 30, ncol = 30)
count1 <- 0
for(q in unique(data.raw$subject)) {
count1 <- count1 + 1
count2 <- 0
for(t in unique(data.raw$subject)) {
count2 <- count2 + 1
c[count1,count2] <- cor(data.raw[data.raw$subject == q,]$answer,data.raw[data.raw$subject == t,]$answer)
}
}
c
ggplot(data = C) +
geom_tile()
cor(data.raw[data.raw$subject == q,]$answer,data.raw[data.raw$subject == t,]$answer)
c <- matrix(, nrow = 30, ncol = 30)
count1 <- 0
for(q in unique(data.raw$subject)) {
count1 <- count1 + 1
colnames(c)[count1] <- q
rownames(c)[count1] <- q
count2 <- 0
for(t in unique(data.raw$subject)) {
count2 <- count2 + 1
c[count1,count2] <- cor(data.raw[data.raw$subject == q,]$answer,data.raw[data.raw$subject == t,]$answer)
}
}
count1
colnames(c)
colnames(c)[count1]
colnames(c)[count1] <- q
count1
colnames(c)[,count1] <- q
rownames(c)[count1,] <- q
colnames(c)[,count1]
q
colnames(c)[,count1] <- q
colnames(c[,count1]) <- q
ddply(data.raw$ answer, .(data.raw$subject), cor)
data.raw$answer%>% group_by(subject)
data.raw$answer %>% group_by(subject)
data.raw %>% group_by(subject)
c
c <- matrix(, nrow = 30, ncol = 30)
count1 <- 0
for(q in unique(data.raw$subject)) {
count1 <- count1 + 1
count2 <- 0
for(t in unique(data.raw$subject)) {
count2 <- count2 + 1
c[count1,count2] <- cor(data.raw[data.raw$subject == q,]$answer,data.raw[data.raw$subject == t,]$answer)
}
}
c
nique(data.raw$subject)
unique(data.raw$subject)
unique(data.raw$subject))
unique(data.raw$subject)
unique(data.raw$subject) == 'sub_1'
list2 <- unique(data.raw$subject)
list2 == 'sub_01'
list2
list2 == 'sub_1'
list2[list2 == 'sub_1']
list2[list2 == 'sub_1'] <- NULL
list2[list2 == 'sub_1'] <- [NULL]]
list2[list2 == 'sub_1'] <- []
list2[list2 == 'sub_1'] <- NULL
list2 == 'sub_1'<- NULL
list2 = 'sub_1'<- NULL
list2
list2 <- unique(data.raw$subject)
data.raw %>% group_by(subject)  %>% answer
data.raw %>% group_by(subject)
data.raw %>% group_by(subject) %>% summarize
data.raw %>% group_by(subject) %>% summarize(answer)
library(tidyverse)
library(ggthemes)
library(scales)
library(langcog)
d.raw = data.frame()
d
library(langcog)
install.packages("devtools")
install.packages("devtools")
devtools::install_github("langcog/langcog")
library(tidyverse)
library(ggthemes)
library(scales)
library(langcog)
d.raw = data.frame()
d
data.frame()
setwd("Users/cmagri1/Dropbox (KonkLab)/Research-SizeCurvature/Experiment-Behavior/git-Analysis/SizeCurvature-Behavior/")
setwd("Users/cmagri1/Dropbox (KonkLab)/Research-SizeCurvature/SizeCurvature-FinalAnalysis/Experiment-Behavior/git-Analysis/SizeCurvature-Behavior/")
Data_conds <- read.csv2("Analysis_cm/AllData_conds.csv", header = TRUE, sep = ",", quote = "\"",dec = ".", fill = TRUE, comment.char = "")
getwd()
setwd("Users/cmagri1/Dropbox (KonkLab)/")
setwd("Users/cmagri1/Dropbox\\ (KonkLab)/")
setwd("Users/cmagri1/Dropbox\\(KonkLab)/")
setwd("Users/cmagri1/Dropbox~(KonkLab)/")
setwd("Users/cmagri1/GoogleDrive/")
setwd("Users/cmagri1/Google\\Drive/")
setwd("Users/cmagri1/anaconda")
getwd()
currwd
setwd("Users/cmagri1/")
setwd("Users/cmagri1")
setwd("~/")
getwd()
setwd("~/anaconda")
setwd(..)
setwd('..')
getwd()
setwd("~/Dropbox\\(Konklab)")
setwd("~/Dropbox\\ (Konklab)")
setwd("~/Dropbox (Konklab)")
setwd('..')
setwd("~/Dropbox (KonkLab)/Research-SizeCurvature/SizeCurvature-FinalAnalysis/Experiment-Behavior/git-Analysis/SizeCurvature-Behavior/")
Data_conds <- read.csv2("Analysis_cm/AllData_conds.csv", header = TRUE, sep = ",", quote = "\"",dec = ".", fill = TRUE, comment.char = "")
d.raw <- bind_rows(d.raw,Data_conds);
library(langcog)
d.raw <- bind_rows(d.raw,Data_conds);
devtools::install_github("langcog/langcog")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("langcog/langcog")
library(dplyr)
d.raw <- bind_rows(d.raw,Data_conds);
d_rt <- d.raw %>%
group_by(participant,SizeCond,CurvCond,current_task,condition) %>%
summarize(meanRT = mean(RT), meanRT_log = mean(RT_log))
d_size_judge <- d_rt %>%
filter(current_task == "JudgeSize")
d_size_judge_plot <- d_size_judge %>%
group_by(condition) %>%
multi_boot_standard(col = "meanRT")
d_curv_judge <- d_rt %>%
filter(current_task == "JudgeCurviness")
d_curv_judge_plot <- d_curv_judge %>%
group_by(condition) %>%
multi_boot_standard(col = "meanRT")
d.raw
(size_judge_plot_h <- ggplot(d_size_judge_plot,aes(x = condition, y = mean, fill=condition)) +
geom_bar(stat="identity", alpha=.6) +
scale_y_continuous(limits=c(400,950),oob = rescale_none) +
# geom_errorbar(aes(ymin=ci_lower, ymax=ci_upper, col=condition), width=0) +
scale_color_manual(values = c("#3841E8",'#5EA8F1', "#E15207",'#EEA019')) +
scale_fill_manual(values = c("#3056E8",'#5EA8F1', "#E15207",'#EEA019')) +
geom_point(data = d_size_judge,aes(x = condition, y = meanRT, fill=condition, color = condition), alpha=.4) +
theme_few() +
ggtitle("Task: Big or Small?") +
labs(y="Average RT", x="") +
theme(legend.position = "none", aspect=1.1))
ggplot(d_curv_judge,aes(x = condition, y = meanRT)) +
geom_point(aes(colour=factor(condition))) +
geom_line(data=d_curv_judge, aes(group = factor(participant)), color="grey", alpha=.2)  +
geom_bar(data = d_size_judge_plot,stat="identity", alpha=.6,aes(x = condition, y = mean, fill=condition)) +
scale_color_manual(values = c("#00008B",'#B5D3E7', "#CC5500",'#EEA019')) +
scale_fill_manual(values = c("#00008B",'#B5D3E7', "#CC5500",'#EEA019')) +
theme_few() +
ggtitle("Task: Big or Small?") +
labs(y="Average RT", x="") +
theme(legend.position = "none", aspect=1.1) +
scale_y_continuous(limits=c(400,1000),oob = rescale_none)
library(ggplot)
library(ggplot2)
(size_judge_plot_h <- ggplot(d_size_judge_plot,aes(x = condition, y = mean, fill=condition)) +
geom_bar(stat="identity", alpha=.6) +
scale_y_continuous(limits=c(400,950),oob = rescale_none) +
# geom_errorbar(aes(ymin=ci_lower, ymax=ci_upper, col=condition), width=0) +
scale_color_manual(values = c("#3841E8",'#5EA8F1', "#E15207",'#EEA019')) +
scale_fill_manual(values = c("#3056E8",'#5EA8F1', "#E15207",'#EEA019')) +
geom_point(data = d_size_judge,aes(x = condition, y = meanRT, fill=condition, color = condition), alpha=.4) +
theme_few() +
ggtitle("Task: Big or Small?") +
labs(y="Average RT", x="") +
theme(legend.position = "none", aspect=1.1))
d_size_judge <- d_rt %>%
filter(current_task == "JudgeSize")
d_size_judge_plot <- d_size_judge %>%
group_by(condition) %>%
multi_boot_standard(col = "meanRT")
