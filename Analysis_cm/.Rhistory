##plus grandaverage
BetaMinusIndMeanPlusGrand[BetaMinusIndMeanPlusGrand$ROI=="LargePHC",1:18] <- BetaMinusIndMean[BetaMinusIndMean$ROI=="LargePHC",1:18] + LargePHCGrandAverage
##old value minus subject average
BetaMinusIndMean$V1[ BetaMinusIndMean$ROI=="LargeTOS"] <-TOSmydata$V1 - mean(TOSmydata[,1])
BetaMinusIndMean$V2[ BetaMinusIndMean$ROI=="LargeTOS"] <-TOSmydata$V2 - mean(TOSmydata[,2])
BetaMinusIndMean$V4[ BetaMinusIndMean$ROI=="LargeTOS"] <-TOSmydata$V4 - mean(TOSmydata[,3])
BetaMinusIndMean$V5[ BetaMinusIndMean$ROI=="LargeTOS"] <-TOSmydata$V5 - mean(TOSmydata[,4])
BetaMinusIndMean$V7[ BetaMinusIndMean$ROI=="LargeTOS"] <-TOSmydata$V7 - mean(TOSmydata[,6])
BetaMinusIndMean$V8[ BetaMinusIndMean$ROI=="LargeTOS"] <-TOSmydata$V8 - mean(TOSmydata[,7])
BetaMinusIndMean$V9[ BetaMinusIndMean$ROI=="LargeTOS"] <-TOSmydata$V9 - mean(TOSmydata[,8])
BetaMinusIndMean$V11[ BetaMinusIndMean$ROI=="LargeTOS"] <-TOSmydata$V11 - mean(TOSmydata[,9])
BetaMinusIndMean$V12[ BetaMinusIndMean$ROI=="LargeTOS"] <-TOSmydata$V12 - mean(TOSmydata[,10])
BetaMinusIndMean$V13[ BetaMinusIndMean$ROI=="LargeTOS"] <-TOSmydata$V13 - mean(TOSmydata[,11])
BetaMinusIndMean$V14[ BetaMinusIndMean$ROI=="LargeTOS"] <-TOSmydata$V14 - mean(TOSmydata[,12])
BetaMinusIndMean$V15[ BetaMinusIndMean$ROI=="LargeTOS"] <-TOSmydata$V15 - mean(TOSmydata[,13])
BetaMinusIndMean$V17[ BetaMinusIndMean$ROI=="LargeTOS"] <-TOSmydata$V17 - mean(TOSmydata[,14])
BetaMinusIndMean$V18[ BetaMinusIndMean$ROI=="LargeTOS"] <-TOSmydata$V18 - mean(TOSmydata[,18])
BetaMinusIndMean$V19[ BetaMinusIndMean$ROI=="LargeTOS"] <-TOSmydata$V19 - mean(TOSmydata[,16])
BetaMinusIndMean$V20[ BetaMinusIndMean$ROI=="LargeTOS"] <-TOSmydata$V20 - mean(TOSmydata[,17])
BetaMinusIndMean$V21[ BetaMinusIndMean$ROI=="LargeTOS"] <-TOSmydata$V21 - mean(TOSmydata[,18])
##plus grandaverage
BetaMinusIndMeanPlusGrand[BetaMinusIndMeanPlusGrand$ROI=="LargeTOS",1:18] <- BetaMinusIndMean[BetaMinusIndMean$ROI=="LargeTOS",1:18] + TOSGrandAverage
##Rewrite MeanAcrossSubBeta
BetaMinusIndMeanPlusGrand$MeanAcrossSubBeta <- NA
BetaMinusIndMeanPlusGrand$MeanAcrossSubBeta <-rowMeans(BetaMinusIndMeanPlusGrand[,1:18], na.rm = TRUE)
BetaMinusIndMeanPlusGrandSmallFGpost<-BetaMinusIndMeanPlusGrand[BetaMinusIndMeanPlusGrand$ROI=="SmallFGpost",]
BetaMinusIndMeanPlusGrandLargePHC<-BetaMinusIndMeanPlusGrand[BetaMinusIndMeanPlusGrand$ROI=="LargePHC",]
BetaMinusIndMeanPlusGrandTOS<-BetaMinusIndMeanPlusGrand[BetaMinusIndMeanPlusGrand$ROI=="LargeTOS",]
##Reorder so that conditions are in right order
#CondData<-newdata
#target <- c(rep("S.MR",25), rep("S.NMR",25), rep("L.MR",25), rep("L.NMR",25))
#CondData<-newdata[match(target, newdata$Condition),]
if (!require(Rmisc)) {install.packages("Rmisc"); require(Rmisc)}
# summarySE provides the standard deviation, standard error of the mean, and a (default 95%) confidence interval
#sumaggSmallFGpost <- summarySE(SmallFGpostmydata, measurevar="MeanAcrossSubBeta", groupvars=c("Size","MR"))
se <- function(x) sd(x)/sqrt(length(x))
BetaMinusIndMeanPlusGrandSmallFGpost$se<-apply(BetaMinusIndMeanPlusGrandSmallFGpost[1:72,c(1:10,12:18)],1,se)
BetaMinusIndMeanPlusGrandLargePHC$se<-apply(BetaMinusIndMeanPlusGrandLargePHC[1:72,c(2,4:18)],1,se)
BetaMinusIndMeanPlusGrandTOS$se<-apply(BetaMinusIndMeanPlusGrandTOS[1:72,c(1:4,6:18)],1,se)
NewSmallFGpostmydata <- within(SmallFGpostmydata,
OrderedMeanAcrossSubBeta <- factor(MeanAcrossSubBeta,
levels=names(sort(table(MeanAcrossSubBeta),
decreasing=TRUE))))
NewLargePHCmydata <- within(LargePHCmydata,
OrderedMeanAcrossSubBeta <- factor(MeanAcrossSubBeta,
levels=names(sort(table(MeanAcrossSubBeta),
decreasing=TRUE))))
NewTOSmydata <- within(TOSmydata,
OrderedMeanAcrossSubBeta <- factor(MeanAcrossSubBeta,
levels=names(sort(table(MeanAcrossSubBeta),
decreasing=TRUE))))
OrderedNewSmallFGpostmydata<-NewSmallFGpostmydata[order(NewSmallFGpostmydata$OrderedMeanAcrossSubBeta),]
OrderedNewLargePHCmydata<-NewLargePHCmydata[order(NewLargePHCmydata$OrderedMeanAcrossSubBeta),]
OrderedNewTOSmydata<-NewTOSmydata[order(NewTOSmydata$OrderedMeanAcrossSubBeta),]
library("ggplot2")
roundUP <- function(x,m) {
p= m*ceiling(x / m)
return(p)}
roundDOWN <- function(x,m) {
p= m*floor(x / m)
return(p)}
TopValue <-  max(NewSmallFGpostmydata$MeanAcrossSubBeta+BetaMinusIndMeanPlusGrandSmallFGpost$se)
MaxY<-roundUP(TopValue,0.5)
fSmallFGpost = ggplot(NewSmallFGpostmydata, aes(x=OrderedMeanAcrossSubBeta, y=MeanAcrossSubBeta, fill = Condition )) +
geom_bar(position=position_dodge(0.1), colour="black", stat="identity", width=1, size=.3) +
geom_errorbar(aes(ymin=MeanAcrossSubBeta-BetaMinusIndMeanPlusGrandSmallFGpost$se, ymax=MeanAcrossSubBeta+BetaMinusIndMeanPlusGrandSmallFGpost$se),
size=.3,    # Thinner lines
width=.2,                    # Width of the error bars
position=position_dodge(1)) +
xlab("\nCondition") +
ylab("Mean Beta\n") +
scale_colour_manual(name="Size", # Legend label, use darker colors
labels=c("Small MotorR", "Small NoMotorR", "Large MotorR", "Large NoMotorR"),
values = c("#EE7B09", "#984D04", "#2B8FD8", "#174C74")) +
scale_y_continuous(expand = c(0,0),
limits = c(0,MaxY),
breaks=seq(0, MaxY, by = 0.5)) +
scale_x_discrete(labels=OrderedNewSmallFGpostmydata$MiniCond)+
scale_fill_manual(values=c("#EE7B09", "#984D04", "#2B8FD8", "#174C74"))
fSmallFGpost + theme_classic()
##Large PHC plot
TopValue <-  max(NewLargePHCmydata$MeanAcrossSubBeta+BetaMinusIndMeanPlusGrandLargePHC$se)
BottomValue <-  min(NewLargePHCmydata$MeanAcrossSubBeta-BetaMinusIndMeanPlusGrandLargePHC$se)
MaxY<-roundUP(TopValue,0.25)
MinY<-roundDOWN(BottomValue,0.25)
fLargePHC = ggplot(NewLargePHCmydata, aes(x=OrderedMeanAcrossSubBeta, y=MeanAcrossSubBeta, fill =Condition )) +
geom_bar(position=position_dodge(0.1), colour="black", stat="identity", width=1, size=.3) +
geom_errorbar(aes(ymin=MeanAcrossSubBeta-BetaMinusIndMeanPlusGrandLargePHC$se, ymax=MeanAcrossSubBeta+BetaMinusIndMeanPlusGrandLargePHC$se),
size=.3,    # Thinner lines
width=.2,                    # Width of the error bars
position=position_dodge(1)) +
xlab("\nCondition") +
ylab("Mean Beta\n") +
scale_colour_manual(name="Size", # Legend label, use darker colors
labels=c("Small MotorR", "Small NoMotorR", "Large MotorR", "Large NoMotorR"),
values = c("#EE7B09", "#984D04", "#2B8FD8", "#174C74")) +
scale_y_continuous(expand = c(0,0),
limits = c(MinY,MaxY),
breaks=seq(MinY, MaxY, by = 0.25)) +
scale_x_discrete(labels=OrderedNewLargePHCmydata$MiniCond)+
scale_fill_manual(values=c("#EE7B09", "#984D04", "#2B8FD8", "#174C74"))
fLargePHC + theme_classic()
TopValue <-  max(NewTOSmydata$MeanAcrossSubBeta+BetaMinusIndMeanPlusGrandTOS$se)
BottomValue <-  min(NewTOSmydata$MeanAcrossSubBeta-BetaMinusIndMeanPlusGrandTOS$se)
MaxY<-roundUP(TopValue,0.25)
MinY<-roundDOWN(BottomValue,0.25)
fNewTOS = ggplot(NewTOSmydata, aes(x=OrderedMeanAcrossSubBeta, y=MeanAcrossSubBeta, fill =Condition )) +
geom_bar(position=position_dodge(0.1), colour="black", stat="identity", width=1, size=.3) +
geom_errorbar(aes(ymin=MeanAcrossSubBeta-BetaMinusIndMeanPlusGrandTOS$se, ymax=MeanAcrossSubBeta+BetaMinusIndMeanPlusGrandTOS$se),
size=.3,    # Thinner lines
width=.2,                    # Width of the error bars
position=position_dodge(1))+
xlab("\nCondition") +
ylab("Mean Beta\n") +
scale_colour_manual(name="Size", # Legend label, use darker colors
labels=c("Small MotorR", "Small NoMotorR", "Large MotorR", "Large NoMotorR"),
values = c("#EE7B09", "#984D04", "#2B8FD8", "#174C74")) +
scale_y_continuous(expand = c(0,0),
limits = c(MinY,MaxY),
breaks=seq(MinY, MaxY, by = 0.25)) +
scale_x_discrete(labels=OrderedNewTOSmydata$MiniCond)+
scale_fill_manual(values=c("#EE7B09", "#984D04", "#2B8FD8", "#174C74"))
fNewTOS + theme_minimal()
fNewTOS + theme_classic()
if (!require(psych)) {install.packages("psych"); require(psych)}
if (!require(paran)) {install.packages("paran"); require(paran)}
mydata1 = read.csv("/Users/caterinamagri/Dropbox (KonkLab)/Research/CurvatureModel/Analysis/Massiveinanimate_kappadists.csv")
mydata1
mydata1 = read.csv("/Users/caterinamagri/Dropbox (KonkLab)/Research/CurvatureModel/Analysis/Massiveinanimate_kappadists.csv",header = FALSE)
head(mydata1)
fa.parallel(mydata1,n.obs = NULL, fm = "minres", fa = "pc",n.iter = 20, simMethod = TRUE)
if (!require(psych)) {install.packages("psych"); require(psych)}   ## package for parallel analysis
if (!require(paran)) {install.packages("paran"); require(paran)}
?fa.parallel
install.packages(c("backports", "bmp", "boot", "candisc", "car", "caret", "checkmate", "cluster", "codetools", "colorspace", "data.table", "digest", "ellipse", "evaluate", "foreach", "foreign", "Formula", "gam", "gdata", "gridExtra", "heplots", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "imager", "ISLR", "iterators", "jsonlite", "knitr", "lattice", "lazyeval", "lme4", "MASS", "Matrix", "mgcv", "mice", "MPsychoR", "munsell", "pastecs", "plotrix", "pracma", "psych", "purrr", "quantreg", "Rcpp", "RcppEigen", "reshape2", "rgl", "rlang", "rmarkdown", "rpart", "rprojroot", "scales", "shiny", "smacof", "sourcetools", "stringi", "stringr", "survival", "tibble", "viridis", "viridisLite", "weights", "yaml"))
install.packages(c("backports", "bmp", "boot", "candisc", "car", "caret", "checkmate", "cluster", "codetools", "colorspace", "data.table", "digest", "ellipse", "evaluate", "foreach", "foreign", "Formula", "gam", "gdata", "gridExtra", "heplots", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "imager", "ISLR", "iterators", "jsonlite", "knitr", "lattice", "lazyeval", "lme4", "MASS", "Matrix", "mgcv", "mice", "MPsychoR", "munsell", "pastecs", "plotrix", "pracma", "psych", "purrr", "quantreg", "Rcpp", "RcppEigen", "reshape2", "rgl", "rlang", "rmarkdown", "rpart", "rprojroot", "scales", "shiny", "smacof", "sourcetools", "stringi", "stringr", "survival", "tibble", "viridis", "viridisLite", "weights", "yaml"))
install.packages(c("backports", "bmp", "boot", "candisc", "car", "caret", "checkmate", "cluster", "codetools", "colorspace", "data.table", "digest", "ellipse", "evaluate", "foreach", "foreign", "Formula", "gam", "gdata", "gridExtra", "heplots", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "imager", "ISLR", "iterators", "jsonlite", "knitr", "lattice", "lazyeval", "lme4", "MASS", "Matrix", "mgcv", "mice", "MPsychoR", "munsell", "pastecs", "plotrix", "pracma", "psych", "purrr", "quantreg", "Rcpp", "RcppEigen", "reshape2", "rgl", "rlang", "rmarkdown", "rpart", "rprojroot", "scales", "shiny", "smacof", "sourcetools", "stringi", "stringr", "survival", "tibble", "viridis", "viridisLite", "weights", "yaml"))
install.packages(c("backports", "bmp", "boot", "candisc", "car", "caret", "checkmate", "cluster", "codetools", "colorspace", "data.table", "digest", "ellipse", "evaluate", "foreach", "foreign", "Formula", "gam", "gdata", "gridExtra", "heplots", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "imager", "ISLR", "iterators", "jsonlite", "knitr", "lattice", "lazyeval", "lme4", "MASS", "Matrix", "mgcv", "mice", "MPsychoR", "munsell", "pastecs", "plotrix", "pracma", "psych", "purrr", "quantreg", "Rcpp", "RcppEigen", "reshape2", "rgl", "rlang", "rmarkdown", "rpart", "rprojroot", "scales", "shiny", "smacof", "sourcetools", "stringi", "stringr", "survival", "tibble", "viridis", "viridisLite", "weights", "yaml"))
install.packages(c("backports", "bmp", "boot", "candisc", "car", "caret", "checkmate", "cluster", "codetools", "colorspace", "data.table", "digest", "ellipse", "evaluate", "foreach", "foreign", "Formula", "gam", "gdata", "gridExtra", "heplots", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "imager", "ISLR", "iterators", "jsonlite", "knitr", "lattice", "lazyeval", "lme4", "MASS", "Matrix", "mgcv", "mice", "MPsychoR", "munsell", "pastecs", "plotrix", "pracma", "psych", "purrr", "quantreg", "Rcpp", "RcppEigen", "reshape2", "rgl", "rlang", "rmarkdown", "rpart", "rprojroot", "scales", "shiny", "smacof", "sourcetools", "stringi", "stringr", "survival", "tibble", "viridis", "viridisLite", "weights", "yaml"))
install.packages(c("backports", "bmp", "boot", "candisc", "car", "caret", "checkmate", "cluster", "codetools", "colorspace", "data.table", "digest", "ellipse", "evaluate", "foreach", "foreign", "Formula", "gam", "gdata", "gridExtra", "heplots", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "imager", "ISLR", "iterators", "jsonlite", "knitr", "lattice", "lazyeval", "lme4", "MASS", "Matrix", "mgcv", "mice", "MPsychoR", "munsell", "pastecs", "plotrix", "pracma", "psych", "purrr", "quantreg", "Rcpp", "RcppEigen", "reshape2", "rgl", "rlang", "rmarkdown", "rpart", "rprojroot", "scales", "shiny", "smacof", "sourcetools", "stringi", "stringr", "survival", "tibble", "viridis", "viridisLite", "weights", "yaml"))
install.packages(c("backports", "bmp", "boot", "candisc", "car", "caret", "checkmate", "cluster", "codetools", "colorspace", "data.table", "digest", "ellipse", "evaluate", "foreach", "foreign", "Formula", "gam", "gdata", "gridExtra", "heplots", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "imager", "ISLR", "iterators", "jsonlite", "knitr", "lattice", "lazyeval", "lme4", "MASS", "Matrix", "mgcv", "mice", "MPsychoR", "munsell", "pastecs", "plotrix", "pracma", "psych", "purrr", "quantreg", "Rcpp", "RcppEigen", "reshape2", "rgl", "rlang", "rmarkdown", "rpart", "rprojroot", "scales", "shiny", "smacof", "sourcetools", "stringi", "stringr", "survival", "tibble", "viridis", "viridisLite", "weights", "yaml"))
install.packages(c("backports", "bmp", "boot", "candisc", "car", "caret", "checkmate", "cluster", "codetools", "colorspace", "data.table", "digest", "ellipse", "evaluate", "foreach", "foreign", "Formula", "gam", "gdata", "gridExtra", "heplots", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "imager", "ISLR", "iterators", "jsonlite", "knitr", "lattice", "lazyeval", "lme4", "MASS", "Matrix", "mgcv", "mice", "MPsychoR", "munsell", "pastecs", "plotrix", "pracma", "psych", "purrr", "quantreg", "Rcpp", "RcppEigen", "reshape2", "rgl", "rlang", "rmarkdown", "rpart", "rprojroot", "scales", "shiny", "smacof", "sourcetools", "stringi", "stringr", "survival", "tibble", "viridis", "viridisLite", "weights", "yaml"))
install.packages(c("backports", "bmp", "boot", "candisc", "car", "caret", "checkmate", "cluster", "codetools", "colorspace", "data.table", "digest", "ellipse", "evaluate", "foreach", "foreign", "Formula", "gam", "gdata", "gridExtra", "heplots", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "imager", "ISLR", "iterators", "jsonlite", "knitr", "lattice", "lazyeval", "lme4", "MASS", "Matrix", "mgcv", "mice", "MPsychoR", "munsell", "pastecs", "plotrix", "pracma", "psych", "purrr", "quantreg", "Rcpp", "RcppEigen", "reshape2", "rgl", "rlang", "rmarkdown", "rpart", "rprojroot", "scales", "shiny", "smacof", "sourcetools", "stringi", "stringr", "survival", "tibble", "viridis", "viridisLite", "weights", "yaml"))
install.packages(c("backports", "bmp", "boot", "candisc", "car", "caret", "checkmate", "cluster", "codetools", "colorspace", "data.table", "digest", "ellipse", "evaluate", "foreach", "foreign", "Formula", "gam", "gdata", "gridExtra", "heplots", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "imager", "ISLR", "iterators", "jsonlite", "knitr", "lattice", "lazyeval", "lme4", "MASS", "Matrix", "mgcv", "mice", "MPsychoR", "munsell", "pastecs", "plotrix", "pracma", "psych", "purrr", "quantreg", "Rcpp", "RcppEigen", "reshape2", "rgl", "rlang", "rmarkdown", "rpart", "rprojroot", "scales", "shiny", "smacof", "sourcetools", "stringi", "stringr", "survival", "tibble", "viridis", "viridisLite", "weights", "yaml"))
install.packages(c("backports", "bmp", "boot", "candisc", "car", "caret", "checkmate", "cluster", "codetools", "colorspace", "data.table", "digest", "ellipse", "evaluate", "foreach", "foreign", "Formula", "gam", "gdata", "gridExtra", "heplots", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "imager", "ISLR", "iterators", "jsonlite", "knitr", "lattice", "lazyeval", "lme4", "MASS", "Matrix", "mgcv", "mice", "MPsychoR", "munsell", "pastecs", "plotrix", "pracma", "psych", "purrr", "quantreg", "Rcpp", "RcppEigen", "reshape2", "rgl", "rlang", "rmarkdown", "rpart", "rprojroot", "scales", "shiny", "smacof", "sourcetools", "stringi", "stringr", "survival", "tibble", "viridis", "viridisLite", "weights", "yaml"))
install.packages(c("backports", "bmp", "boot", "candisc", "car", "caret", "checkmate", "cluster", "codetools", "colorspace", "data.table", "digest", "ellipse", "evaluate", "foreach", "foreign", "Formula", "gam", "gdata", "gridExtra", "heplots", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "imager", "ISLR", "iterators", "jsonlite", "knitr", "lattice", "lazyeval", "lme4", "MASS", "Matrix", "mgcv", "mice", "MPsychoR", "munsell", "pastecs", "plotrix", "pracma", "psych", "purrr", "quantreg", "Rcpp", "RcppEigen", "reshape2", "rgl", "rlang", "rmarkdown", "rpart", "rprojroot", "scales", "shiny", "smacof", "sourcetools", "stringi", "stringr", "survival", "tibble", "viridis", "viridisLite", "weights", "yaml"))
install.packages(c("backports", "bmp", "boot", "candisc", "car", "caret", "checkmate", "cluster", "codetools", "colorspace", "data.table", "digest", "ellipse", "evaluate", "foreach", "foreign", "Formula", "gam", "gdata", "gridExtra", "heplots", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "imager", "ISLR", "iterators", "jsonlite", "knitr", "lattice", "lazyeval", "lme4", "MASS", "Matrix", "mgcv", "mice", "MPsychoR", "munsell", "pastecs", "plotrix", "pracma", "psych", "purrr", "quantreg", "Rcpp", "RcppEigen", "reshape2", "rgl", "rlang", "rmarkdown", "rpart", "rprojroot", "scales", "shiny", "smacof", "sourcetools", "stringi", "stringr", "survival", "tibble", "viridis", "viridisLite", "weights", "yaml"))
install.packages(c("backports", "bmp", "boot", "candisc", "car", "caret", "checkmate", "cluster", "codetools", "colorspace", "data.table", "digest", "ellipse", "evaluate", "foreach", "foreign", "Formula", "gam", "gdata", "gridExtra", "heplots", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "imager", "ISLR", "iterators", "jsonlite", "knitr", "lattice", "lazyeval", "lme4", "MASS", "Matrix", "mgcv", "mice", "MPsychoR", "munsell", "pastecs", "plotrix", "pracma", "psych", "purrr", "quantreg", "Rcpp", "RcppEigen", "reshape2", "rgl", "rlang", "rmarkdown", "rpart", "rprojroot", "scales", "shiny", "smacof", "sourcetools", "stringi", "stringr", "survival", "tibble", "viridis", "viridisLite", "weights", "yaml"))
install.packages(c("backports", "bmp", "boot", "candisc", "car", "caret", "checkmate", "cluster", "codetools", "colorspace", "data.table", "digest", "ellipse", "evaluate", "foreach", "foreign", "Formula", "gam", "gdata", "gridExtra", "heplots", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "imager", "ISLR", "iterators", "jsonlite", "knitr", "lattice", "lazyeval", "lme4", "MASS", "Matrix", "mgcv", "mice", "MPsychoR", "munsell", "pastecs", "plotrix", "pracma", "psych", "purrr", "quantreg", "Rcpp", "RcppEigen", "reshape2", "rgl", "rlang", "rmarkdown", "rpart", "rprojroot", "scales", "shiny", "smacof", "sourcetools", "stringi", "stringr", "survival", "tibble", "viridis", "viridisLite", "weights", "yaml"))
install.packages("psych")
if (!require(psych)) {install.packages("psych"); require(psych)}   ## package for parallel analysis
if (!require(paran)) {install.packages("paran"); require(paran)}
?fa.parallel
if (!require(psych)) {install.packages("psych"); require(psych)}   ## package for parallel analysis
mydata1 = read.csv("/Users/caterinamagri/Dropbox (KonkLab)/Research/CurvatureModel/Analysis/Massiveinanimate_kappadists.csv",header = FALSE)
head(mydata1)
fa.parallel(mydata1,n.obs = NULL, fm = "minres", fa = "pc",n.iter = 20, sim = TRUE)
fa.parallel(mydata1,n.obs = NULL, fm = "ml", fa = "pc",n.iter = 20, sim = TRUE)
fa.parallel(mydata1,n.obs = NULL, fm = "ml", fa = "pc",n.iter = 20)
fa.parallel(mydata1,n.obs = NULL, fm = "ml", fa = "pc",n.iter = 20)
test.data <- Harman74.cor$cov   #The 24 variable Holzinger - Harman problem
#fa.parallel(test.data,n.obs=145)
fa.parallel(Thurstone,n.obs=213)   #the 9 variable Thurstone problem
fa.parallel(mydata1,n.obs = NULL, fm = "ml", fa = "pc",n.iter = 20)
fa.parallel(mydata1,n.obs = 50, fm = "ml", fa = "pc",n.iter = 20)
fa.parallel(mydata1, fm = "ml", fa = "pc",n.iter = 20)
##Parallel Analysis to decided how many factors
paran(mydata1, iterations = 50,
all = FALSE, cfa = FALSE, file = "")
if (!require(paran)) {install.packages("paran"); require(paran)}
##Parallel Analysis to decided how many factors
paran(mydata1, iterations = 50,
all = FALSE, cfa = FALSE, file = "")
##Parallel Analysis to decided how many factors
paran(mydata1, iterations = 20,
all = FALSE, cfa = FALSE, file = "")
fa.parallel(mydata1, fm="ml", n.iter=50)
fa.parallel(mydata1, fm = "ml",n.iter = 20)
fa.parallel(mydata1, fm = "minres",n.iter = 20)
fa.parallel(mydata1, fm = "ml",n.iter = 20)
mydata1
head(mydata1)
round(mydata1)
round(mydata1,0.2)
round(mydata1,2)
round(mydata1,4)
mydata1_round<-round(mydata1,4)
fa.parallel(mydata1_round, fm = "ml",n.iter = 20)
fa.parallel(mydata1_round, fm = "minres",n.iter = 20)
?prcomp
prcomp(mydata1)
summary(prcomp(mydata1))
summary(PCA(mydata1))
PCA(mydata1)
princomp(mydata1)
summary(princomp(mydata1))
?princcomp
PCA <- prcomp(mydata1)
pca()
PCA.pca
summary(prcomp(mydata1))
pc <- prcomp(x)
ev <- pc$sdev^2
ev
?prcomp
pc <- prcomp(mydata1)
ev <- pc$sdev^2
ev
?fa.parallel
fa.parallel(mydata1, fm = "minres",n.iter = 20)
fa.parallel(mydata1, fm="ml", n.iter=50)
# Load packages -----------------------------------------------------------
if (!require(psych)) {install.packages("psych"); require(psych)}   ## package for parallel analysis
if (!require(paran)) {install.packages("paran"); require(paran)}
?fa.parallel
methods(fa)
mydata1 = read.csv("/Users/caterinamagri/Dropbox (KonkLab)/Research/CurvatureModel/Analysis/Massiveinanimate_kappadists.csv",header = FALSE)
head(mydata1)
fa.parallel(mydata1, fm = "minres",n.iter = 20)
#library(MASS)
##Parallel Analysis to decided how many factors
paran(mydata1, iterations = 20,
all = FALSE, cfa = FALSE, file = "")
#library(MASS)
?paran
##Parallel Analysis to decided how many factors
paran(mydata1, iterations = 20,
all = FALSE, cfa = FALSE, graph = TRUE)
principal(mydata1)
eigen(mydata1)
eigen.loadings(mydata1)
summary(eigen.loadings(mydata1))
eigen(mydata1)$values
eigen(mydata1)
?eigen
eigen(mydata1, symmetric = FALSE)
rx <- cor(mydata1,use="pairwise")
rx
eigen(rx)
eigen(rx)$values
?fa.parallel
fa.parallel(mydata1, fm = "minres",n.iter = 20, SMC = TRUE)
library(tidyverse)
if (!require(tidyverse)) {install.packages("tidyverse"); require(tidyverse)}   ## package for parallel analysis
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages(“lme4”)
library(lme4)
politeness= read.csv("http://www.bodowinter.com/tutorial/politeness_data.csv")
politeness = read.csv(file.choose( ))
head(politeness)
boxplot(frequency ~ attitude*gender,
col=c("white","lightgray"),politeness)
boxplot(frequency ~ attitude*gender,
col=c("white","lightgray"),politeness)
politeness.model = lmer(frequency ~ attitude + (1|subject) + (1|scenario), data=politeness)
politeness.model
head(politeness)
#Let’s add gender as an additional fixed effect:
politeness.model = lmer(frequency ~ attitude +
gender + (1|subject) +
(1|scenario), data=politeness)
politeness.model
##Compare models with and without variable of interest using likelihood ratio test
politeness.null = lmer(frequency ~ gender +
(1|subject) + (1|scenario), data=politeness,
REML=FALSE)
politeness.model = lmer(frequency ~ attitude +
gender +
(1|subject) + (1|scenario), data=politeness,
REML=FALSE)
anova(politeness.null,politeness.model)
coef(politeness.model)
##Let's now run a random slope model, in which we allow subject and scenario to also have varying slopes
politeness.model = lmer(frequency ~ attitude +
gender + (1+attitude|subject) +
(1+attitude|scenario),
data=politeness,
REML=FALSE)
politeness.model
politeness
##Let's compare this model to a new null model
politeness.null = lmer(frequency ~ gender + (1+attitude|subject) + (1+attitude|scenario), data=politeness, REML=FALSE)
#Note that the null model needs to have the same random effects structure.
#So, if your full model is a random slope model, your null model also needs to be a random slope model.
anova(politeness.null,politeness.model)
library(tidyverse)
library(forcats)
library(broom)
library(modelr)
library(stringr)
library(titanic)
library(rcfss)
library(car)
library(plotly)
library(haven)
library(coefplot)
options(digits = 3)
set.seed(1234)
theme_set(theme_minimal())
library(tidyverse)
if (!require(tidyverse)) install.packages("tidyverse");
library(tidyverse)
install.library("tidyverse")
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
if (!require(tidyverse)) install.packages("tidyverse"); library(tidyverse)
library(haven)
library(broom)
library(modelr)
library(stringr)
library(car)
library(plotly)
library(rcfss)
library(haven)
library(coefplot)
install.packages("coefplot");
library(coefplot)
install.packages("car");
library(car)
install.packages("car")
install.packages("car")
library(car)
library(rcfss)
install.packages("rcfss");
options(digits = 3)
set.seed(1234)
theme_set(theme_minimal())
install.packages("rcfss");
install.packages("devtools")
library(devtools)
install_github("uc-cfss/rcfss")
library(rcfss)
options(digits = 3)
set.seed(1234)
theme_set(theme_minimal())
library(ggplot2)
theme_set(theme_minimal())
##Additive model
n_sim <- 100
additive <- data_frame(x = runif(n_sim),
z = runif(n_sim)) %>%
mutate(z = ifelse(z > .5, 1, 0),
y = x + z + rnorm(n_sim))
additive %>%
add_predictions(lm(y ~ x + z, data = .)) %>%
ggplot(aes(x, y, color = factor(z))) +
geom_point() +
geom_line(aes(y = pred)) +
theme(legend.position = "none")
additive <- data_frame(x = runif(n_sim),
z = runif(n_sim))
?data_frame
# Install from CRAN
library(tidyverse)              ## package for mixed-effects models
library(forcats)
library(titanic)
library(devtools)
library(rcfss)
library(car)
library(broom)
library(modelr)
library(stringr)
library(haven)
library(coefplot)
library(plotly)
library(coefplot)
library(ggplot2)
install.packages("plotly")
library(plotly)
install.packages("hexbin")
install.packages("hexbin")
install.packages("plotly")
library(plotly)
# Install from CRAN
library(tidyverse)              ## package for mixed-effects models
library(forcats)
library(titanic)
library(devtools)
library(rcfss)
library(car)
library(broom)
library(modelr)
library(stringr)
library(coefplot)
library(coefplot)
library(ggplot2)
library(haven)
library(plotly)
options(digits = 3)
set.seed(1234)
theme_set(theme_minimal())
##Additive model
n_sim <- 100
additive <- data_frame(x = runif(n_sim),
z = runif(n_sim))
mutate(z = ifelse(z > .5, 1, 0),
y = x + z + rnorm(n_sim))
additive
add_predictions(lm(y ~ x + z, data = .))
ggplot(aes(x, y, color = factor(z))) +
geom_point() +
geom_line(aes(y = pred)) +
theme(legend.position = "none")
additive
mutate
additive <- data_frame(x = runif(n_sim),
z = runif(n_sim))
mutate(z = ifelse(z > .5, 1, 0),
y = x + z + rnorm(n_sim))
additive <- data_frame(x = runif(n_sim),
z = runif(n_sim))  %>%
mutate(z = ifelse(z > .5, 1, 0),
y = x + z + rnorm(n_sim))
additive %>%
add_predictions(lm(y ~ x + z, data = .)) %>%
ggplot(aes(x, y, color = factor(z))) +
geom_point() +
geom_line(aes(y = pred)) +
theme(legend.position = "none")
obama_ideo_gop <- lm(ObamaTherm ~ RConserv * GOP, data = nes)
# get nes data
nes <- read_dta("data/nes2008.dta") %>%
select(obama_therm_post, partyid3, libcon7, libcon7_obama) %>%
mutate_each(funs(ifelse(is.nan(.), NA, .))) %>%
rename(ObamaTherm = obama_therm_post,
RConserv = libcon7,
ObamaConserv = libcon7_obama) %>%
mutate(GOP = ifelse(partyid3 == 3, 1, 0)) %>%
select(-partyid3) %>%
na.omit
# get nes data
politeness= read.csv("http://www.bodowinter.com/tutorial/politeness_data.csv")
head(politeness)
lmInter <- lm(frequency ~ attitude * gender, data = nes)
lmInter <- lm(frequency ~ attitude * gender, data = politeness)
tidy(lmInter)
head(politeness)
glance(lmInter)
rm(list=ls())
setwd("/Users/caterinamagri/Dropbox (KonkLab)/Research-SizeCurvature/Project-SizeCurvatureBehavior_RerunbyStella/SizeCurv_Rerun_Reanalysis_ByCat/Analysis_cm/")
read.mat("AllData_conds")
install.packages("rmatio")
read.mat("AllData_conds")
library("rmatio")
read.mat("AllData_conds")
setwd("/Users/caterinamagri/Dropbox (KonkLab)/Research-SizeCurvature/Project-SizeCurvatureBehavior_RerunbyStella/SizeCurv_Rerun_Reanalysis_ByCat/Analysis_cm/")
read.mat("AllData_conds")
ls()
read.mat("AllData_conds.mat")
# library to read matlab data formats into R
library(R.matlab)
# library to read matlab data formats into R
install.packages("R.matlab")
library(R.matlab)
setwd("/Users/caterinamagri/Dropbox (KonkLab)/Research-SizeCurvature/Project-SizeCurvatureBehavior_RerunbyStella/SizeCurv_Rerun_Reanalysis_ByCat/Analysis_cm/")
readMat("AllData_conds.mat")
data <-readMat("AllData_conds.mat")
head(data)
Data_conds <- read.csv2("AllData_conds", header = TRUE, sep = ",", quote = "\"",dec = ".", fill = TRUE, comment.char = "")
setwd("/Users/caterinamagri/Dropbox (KonkLab)/Research-SizeCurvature/Project-SizeCurvatureBehavior_RerunbyStella/SizeCurv_Rerun_Reanalysis_ByCat/Analysis_cm/")
Data_conds <- read.csv2("AllData_conds", header = TRUE, sep = ",", quote = "\"",dec = ".", fill = TRUE, comment.char = "")
Data_conds <- read.csv2("AllData_conds.csv", header = TRUE, sep = ",", quote = "\"",dec = ".", fill = TRUE, comment.char = "")
Data_conds
library(tidyverse)
d_size_judge <- Data_conds$RT_log %>%
filter(current_task == "JudgeSize")
current_task
Data_conds
d_size_judge <- Data_conds$RT_log %>%
filter(Data_conds$current_task == "JudgeSize")
bind_rows(Data_conds)
d.raw = data.frame()
d.raw <- bind_rows(d.raw,Data_conds);
d.raw
d_rt <- d.raw %>%
filter(RT>300 & RT<2000) %>%
filter(ACC==1) %>% ## gets rid of timeout and incorrect
group_by(participant,SizeCond,CurvCond,current_task,condition) %>%
summarize(meanRT = mean(RT), meanRT_log = mean(RT_log))
d_rt <- d.raw %>%
filter(RT>300 & RT<2000) %>%
filter(accuracy==1) %>% ## gets rid of timeout and incorrect
group_by(participant,SizeCond,CurvCond,current_task,condition) %>%
summarize(meanRT = mean(RT), meanRT_log = mean(RT_log))
d_rt
d_rt <- d.raw %>%
filter(RT>300 & RT<2000) %>%
filter(accuracy==1) %>% ## gets rid of timeout and incorrect
mutate(logRT = log(RT)) %>%
group_by(participant,SizeCond,CurvCond,current_task,condition) %>%
summarize(meanRT = mean(RT), meanRT_log = mean(RT_log))
d_rt
d_rt <- d.raw %>%
filter(RT>300 & RT<2000) %>%
filter(accuracy==1) %>% ## gets rid of timeout and incorrect
mutate(RT_log = log(RT)) %>%
group_by(participant,SizeCond,CurvCond,current_task,condition) %>%
summarize(meanRT = mean(RT), meanRT_log = mean(RT_log))
d_rt
d_rt
d_size_judge <- d_rt %>%
filter(current_task == "JudgeSize")
d_size_judge_plot <- d_size_judge %>%
group_by(condition) %>%
multi_boot_standard(col = "meanRT")
install.packages(langcog)
install.packages('langcog')
install.packages(c("assertthat", "backports", "BH", "bmp", "boot", "broom", "Cairo", "callr", "candisc", "carData", "caret", "caTools", "checkmate", "class", "cli", "clipr", "cluster", "codetools", "colorspace", "curl", "DAAG", "data.table", "dbplyr", "devtools", "digest", "ellipse", "evaluate", "forcats", "foreach", "foreign", "formatR", "Formula", "fs", "gam", "gdata", "ggplot2", "git2r", "glue", "gridExtra", "gtable", "gtools", "haven", "heplots", "highr", "Hmisc", "htmlTable", "httpuv", "httr", "imager", "irr", "ISLR", "iterators", "jsonlite", "knitr", "lattice", "lazyeval", "lme4", "lubridate", "markdown", "MASS", "Matrix", "mgcv", "mice", "mime", "ModelMetrics", "MPsychoR", "nloptr", "openssl", "paran", "pastecs", "pkgbuild", "plotly", "plotrix", "polynom", "pracma", "processx", "psych", "purrr", "quantreg", "R6", "Rcpp", "RcppEigen", "readbitmap", "readxl", "remotes", "reprex", "reshape2", "rgl", "rlang", "rmarkdown", "rpart", "rprojroot", "rstudioapi", "rvest", "shiny", "smacof", "sourcetools", "stringi", "stringr", "survey", "survival", "testthat", "tibble", "usethis", "utf8", "viridis", "viridisLite", "weights", "wordcloud", "xml2", "xtable", "yaml", "zip", "zoo"))
